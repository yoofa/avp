import("//base/build/ave.gni")

group("player") {
  deps = [ ":avplayer" ]
}

ave_library("avplayer_builder") {
  sources = [ "avp_builder.cc" ]
  deps = [
    ":avplayer",
    "//api:player_interface",
  ]
}

ave_library("packet_source") {
  sources = [
    "packet_source.cc",
    "packet_source.h",
  ]
  deps = [ "//media/foundation:foundation" ]
}

ave_library("avplayer") {
  sources = [
    "avp_decoder.cc",
    "avp_decoder.h",
    "avplayer.cc",
    "avplayer.h",
    "message_def.h",
  ]
  configs += [ "//build/config/compiler:rtti" ]

  deps = [
    "//api:player_interface",
    "//base:logging",
    "//base:utils",
    "//base/system:ave_export",
    "//media/foundation:foundation",
  ]

  cflags = [ "-Wno-multichar" ]
}

ave_library("avsync_controller") {
  sources = [
    "avsync_controller.cc",
    "avsync_controller.h",
  ]
  deps = [
    "//api:player_interface",
    "//base:timeutils",
  ]
}

ave_library("avsync_controller_unittest") {
  testonly = true
  sources = [ "avsync_controller_unittest.cc" ]
  deps = [
    ":avsync_controller",
    "//test:test_support",
  ]
}

ave_library("avp_render") {
  sources = [
    "avp_render.cc",
    "avp_render.h",
  ]
  deps = [
    "//api:player_interface",
    "//base:logging",
    "//base:task_util",
    "//media/foundation:foundation",
  ]
}

ave_library("avp_audio_render") {
  sources = [
    "avp_audio_render.cc",
    "avp_audio_render.h",
  ]
  deps = [
    ":avp_render",
    "//base:checks",
    "//base:logging",
    "//base:timeutils",
    "//base:utils",
    "//media/audio:audio",
    "//media/foundation:foundation",
  ]
}

ave_library("avp_render_unittest") {
  testonly = true
  sources = [ "avp_render_unittest.cc" ]
  deps = [
    ":avp_render",
    "//base/test:mock_task_runner_factory",
    "//test:test_support",
  ]
}

ave_library("avp_audio_render_unittest") {
  testonly = true
  sources = [ "avp_audio_render_unittest.cc" ]
  deps = [
    ":avp_audio_render",
    "//base/test:mock_task_runner_factory",
    "//test:test_support",
  ]
}

executable("player_unittests") {
  testonly = true
  deps = [
    ":avp_audio_render_unittest",
    ":avp_render_unittest",
    ":avsync_controller_unittest",
    "//test:test_main",
    "//test:test_support",
  ]
}
